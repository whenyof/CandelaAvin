const vibesDB = require('./database.js');

async function testDatabase() {
    try {
        console.log('üß™ Iniciando pruebas de la base de datos...\n');

        // Test 1: Conexi√≥n
        console.log('1Ô∏è‚É£ Probando conexi√≥n...');
        await vibesDB.initDatabase();
        console.log('‚úÖ Conexi√≥n exitosa\n');

        // Test 2: Crear usuario de prueba
        console.log('2Ô∏è‚É£ Probando creaci√≥n de usuario...');
        const testUser = await vibesDB.createUser({
            nombre: 'Usuario Prueba',
            email: 'test@candela.com',
            password: 'test123'
        });
        console.log('‚úÖ Usuario creado:', testUser.email, 'ID:', testUser.id);
        console.log('   Puntos iniciales:', testUser.puntos);
        console.log('   Nivel:', testUser.nivel);
        console.log('   C√≥digo de referido:', testUser.refer_code, '\n');

        // Test 3: Login
        console.log('3Ô∏è‚É£ Probando login...');
        const loggedUser = await vibesDB.login('test@candela.com', 'test123');
        if (loggedUser) {
            console.log('‚úÖ Login exitoso:', loggedUser.nombre);
        } else {
            console.log('‚ùå Login fall√≥');
        }
        console.log('');

        // Test 4: Agregar puntos
        console.log('4Ô∏è‚É£ Probando sistema de puntos...');
        await vibesDB.addPoints(testUser.id, 100, 'test', 'Puntos de prueba');
        const updatedUser = await vibesDB.getUserById(testUser.id);
        console.log('‚úÖ Puntos agregados. Nuevo total:', updatedUser.puntos);
        console.log('   Nuevo nivel:', updatedUser.nivel, '\n');

        // Test 5: Obtener acciones
        console.log('5Ô∏è‚É£ Probando historial de acciones...');
        const actions = await vibesDB.getUserActions(testUser.id);
        console.log('‚úÖ Acciones encontradas:', actions.length);
        actions.forEach(action => {
            console.log(`   - ${action.tipo_accion}: ${action.puntos_obtenidos} puntos (${action.descripcion})`);
        });
        console.log('');

        // Test 6: Obtener recompensas disponibles
        console.log('6Ô∏è‚É£ Probando recompensas disponibles...');
        const rewards = await vibesDB.getAvailableRewards();
        console.log('‚úÖ Recompensas disponibles:', rewards.length);
        rewards.forEach(reward => {
            console.log(`   - ${reward.nombre}: ${reward.puntos_requeridos} puntos`);
        });
        console.log('');

        // Test 7: Canjear recompensa
        console.log('7Ô∏è‚É£ Probando canje de recompensa...');
        if (rewards.length > 0 && updatedUser.puntos >= rewards[0].puntos_requeridos) {
            const result = await vibesDB.redeemReward(testUser.id, rewards[0].id);
            if (result.success) {
                console.log('‚úÖ Recompensa canjeada:', result.message);
            } else {
                console.log('‚ùå Error al canjear:', result.message);
            }
        } else {
            console.log('‚ö†Ô∏è No hay suficientes puntos para canjear recompensa');
        }
        console.log('');

        // Test 8: Crear rese√±a
        console.log('8Ô∏è‚É£ Probando sistema de rese√±as...');
        const reviewResult = await vibesDB.recordReview(testUser.id, 'Excelente servicio!', 5);
        console.log('‚úÖ Rese√±a creada:', reviewResult.nueva ? 'Nueva' : 'Actualizada');
        console.log('');

        // Test 9: Obtener estad√≠sticas
        console.log('9Ô∏è‚É£ Probando estad√≠sticas de usuario...');
        const stats = await vibesDB.getUserStats(testUser.id);
        console.log('‚úÖ Estad√≠sticas obtenidas:');
        console.log(`   - Puntos ganados: ${stats.totalPointsEarned}`);
        console.log(`   - Puntos gastados: ${stats.totalPointsSpent}`);
        console.log(`   - Puntos actuales: ${stats.currentPoints}`);
        console.log(`   - Nivel: ${stats.level}`);
        console.log(`   - Recompensas totales: ${stats.totalRewards}`);
        console.log('');

        // Test 10: Crear referido
        console.log('üîü Probando sistema de referidos...');
        const referral = await vibesDB.createReferral(testUser.id, 'amigo@test.com');
        console.log('‚úÖ Referido creado para:', referral.invitado_email);
        console.log('   Estado:', referral.estado);
        console.log('');

        console.log('üéâ Todas las pruebas completadas exitosamente!');
        console.log('\nüìä Resumen:');
        console.log('   - Conexi√≥n a MySQL: ‚úÖ');
        console.log('   - Gesti√≥n de usuarios: ‚úÖ');
        console.log('   - Sistema de puntos: ‚úÖ');
        console.log('   - Historial de acciones: ‚úÖ');
        console.log('   - Sistema de recompensas: ‚úÖ');
        console.log('   - Sistema de rese√±as: ‚úÖ');
        console.log('   - Sistema de referidos: ‚úÖ');
        console.log('   - Estad√≠sticas: ‚úÖ');

        // Limpiar usuario de prueba
        console.log('\nüßπ Limpiando datos de prueba...');
        // Nota: En producci√≥n, podr√≠as querer mantener los datos de prueba

    } catch (error) {
        console.error('‚ùå Error durante las pruebas:', error.message);
        console.log('\nüí° Posibles soluciones:');
        console.log('   1. Verifica que MySQL est√© ejecut√°ndose');
        console.log('   2. Ejecuta: npm run setup-db');
        console.log('   3. Verifica las credenciales en config.env');
    } finally {
        // Cerrar conexi√≥n
        await vibesDB.close();
    }
}

// Ejecutar si se llama directamente
if (require.main === module) {
    testDatabase();
}

module.exports = testDatabase; 